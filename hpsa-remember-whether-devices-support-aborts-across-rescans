hpsa: remember whether devices support aborts across rescans

From: Stephen M. Cameron <scameron@beardog.cce.hp.com>

While rescanning devices only test whether devices support aborts
the first time we encounter a device rather than every time.

Signed-off-by: Stephen M. Cameron <scameron@beardog.cce.hp.com>
---
 drivers/scsi/hpsa.c |   25 +++++++++++++++++++++----
 1 file changed, 21 insertions(+), 4 deletions(-)

diff --git a/drivers/scsi/hpsa.c b/drivers/scsi/hpsa.c
index bad6f05..a98b8e6 100644
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@ -2781,6 +2781,8 @@ static int hpsa_update_device_info(struct ctlr_info *h,
 
 	unsigned char *inq_buff;
 	unsigned char *obdr_sig;
+	unsigned long flags;
+	int rc, entry;
 
 	inq_buff = kzalloc(OBDR_TAPE_INQ_SIZE, GFP_KERNEL);
 	if (!inq_buff)
@@ -2834,10 +2836,25 @@ static int hpsa_update_device_info(struct ctlr_info *h,
 						OBDR_SIG_LEN) == 0);
 	}
 	kfree(inq_buff);
-	this_device->supports_aborts =
-			hpsa_device_supports_aborts(h, scsi3addr);
-	if (this_device->supports_aborts < 0)
-		this_device->supports_aborts = 0;
+
+	/*
+	 * See if this device supports aborts.  If we already know
+	 * the device, we already know if it supports aborts, otherwise
+	 * we have to find out if it supports aborts by trying one.
+	 */
+	spin_lock_irqsave(&h->devlock, flags);
+	rc = hpsa_scsi_find_entry(this_device, h->dev, h->ndevices, &entry);
+	if ((rc == DEVICE_SAME || rc == DEVICE_UPDATED) &&
+		entry >= 0 && entry < h->ndevices) {
+		this_device->supports_aborts = h->dev[entry]->supports_aborts;
+		spin_unlock_irqrestore(&h->devlock, flags);
+	} else {
+		spin_unlock_irqrestore(&h->devlock, flags);
+		this_device->supports_aborts =
+				hpsa_device_supports_aborts(h, scsi3addr);
+		if (this_device->supports_aborts < 0)
+			this_device->supports_aborts = 0;
+	}
 	return 0;
 
 bail_out:
